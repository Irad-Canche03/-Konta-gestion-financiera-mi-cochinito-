/* 
Programa: "Konta gestion financiera (mi cochinito)"
Objetivo: Desarrollar una aplicación en consola que permita al usuario registrar, consultar y analizar ingresos y gastos personales mediante el uso de estructuras, archivos, arreglos, cadenas y control de flujo, incorporando funciones de balance por fecha y planes de ahorro.
Autor: Canche Galvan Irad Francisco y Rosel Hermo Diego Leonardo
Versión: 1.2
Compilador: Zinjal
*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_DESC 100
#define MAX_CAT 30
#define ARCHIVO_DATOS "movimientos.txt"

typedef enum {
	INGRESO = 1,
		GASTO = 2
} TipoOperacion;

typedef struct {
	char descripcion[MAX_DESC];
	char categoria[MAX_CAT];
	char fecha[11]; // Formato: DD/MM/AAAA
	float monto;
	TipoOperacion tipo;
} Movimiento;

// Prototipos
void mostrarMenu();
void registrarMovimiento();
void verBalance();
void balanceFiltrado(int tipo);
void generarReporte();
void calcularImpuestos();
void exportarCSV();
void planesAhorro();

int main() {
	int opcion;
	
	do {
		mostrarMenu();
		printf("Seleccione una opción: ");
		scanf("%d", &opcion);
		getchar();
		
		switch (opcion) {
		case 1: registrarMovimiento(); break;
		case 2: verBalance(); break;
		case 3: generarReporte(); break;
		case 4: calcularImpuestos(); break;
		case 5: exportarCSV(); break;
		case 6: planesAhorro(); break;
		case 7: printf("Saliendo del sistema...\n"); break;
		default: printf("Opción no válida.\n");
		}
		
	} while (opcion != 7);
	
	return 0;
}

void mostrarMenu() {
	printf("\n===== KONTA - MI COCHINITO =====\n");
	printf("1. Registrar ingreso/gasto\n");
	printf("2. Ver balance financiero\n");
	printf("3. Generar reporte\n");
	printf("4. Calcular impuestos\n");
	printf("5. Exportar declaración (CSV)\n");
	printf("6. Planes de ahorro\n");
	printf("7. Salir\n");
}

void registrarMovimiento() {
	Movimiento m;
	FILE *f = fopen(ARCHIVO_DATOS, "a");
	
	if (!f) {
		printf("Error al abrir archivo.\n");
		return;
	}
	
	printf("\n--- Registrar Movimiento ---\n");
	printf("Tipo [1 = Ingreso | 2 = Gasto]: ");
	int tempTipo;
	scanf("%d", &tempTipo);
	getchar();
	m.tipo = (TipoOperacion)tempTipo;
	
	if (m.tipo != INGRESO && m.tipo != GASTO) {
		printf("Tipo inválido.\n");
		fclose(f);
		return;
	}
	
	printf("Descripción: ");
	fgets(m.descripcion, MAX_DESC, stdin);
	m.descripcion[strcspn(m.descripcion, "\n")] = '\0';
	
	printf("Categoría: ");
	fgets(m.categoria, MAX_CAT, stdin);
	m.categoria[strcspn(m.categoria, "\n")] = '\0';
	
	printf("Fecha (DD/MM/AAAA): ");
	fgets(m.fecha, 11, stdin);
	m.fecha[strcspn(m.fecha, "\n")] = '\0';
	
	printf("Monto: ");
	scanf("%f", &m.monto);
	getchar();
	
	if (m.monto <= 0) {
		printf("Monto inválido.\n");
		fclose(f);
		return;
	}
	
	fprintf(f, "%s|%s|%s|%.2f|%d\n", m.fecha, m.categoria, m.descripcion, m.monto, m.tipo);
	fclose(f);
	
	printf("? Movimiento guardado.\n");
}

void verBalance() {
	int tipo;
	printf("\n--- Tipo de balance ---\n");
	printf("1. Diario\n2. Mensual\n3. Anual\n");
	printf("Seleccione: ");
	scanf("%d", &tipo);
	getchar();
	balanceFiltrado(tipo);
}

void balanceFiltrado(int tipo) {
	FILE *f = fopen(ARCHIVO_DATOS, "r");
	if (!f) {
		printf("No hay datos.\n");
		return;
	}
	
	char filtro[11], linea[200];
	Movimiento m;
	float ingresos = 0, gastos = 0;
	
	printf("Fecha para filtrar (%s): ", tipo == 1 ? "DD/MM/AAAA" : tipo == 2 ? "MM/AAAA" : "AAAA");
	fgets(filtro, sizeof(filtro), stdin);
	filtro[strcspn(filtro, "\n")] = '\0';
	
	while (fgets(linea, sizeof(linea), f)) {
		sscanf(linea, "%10[^|]|%29[^|]|%99[^|]|%f|%d",
			   m.fecha, m.categoria, m.descripcion, &m.monto, (int *)&m.tipo);
		if (strncmp(m.fecha + (tipo == 1 ? 0 : tipo == 2 ? 3 : 6), filtro,
					tipo == 1 ? 10 : tipo == 2 ? 7 : 4) == 0) {
			if (m.tipo == INGRESO) ingresos += m.monto;
			else gastos += m.monto;
		}
	}
	
	fclose(f);
	printf("\nIngresos: $%.2f\nGastos: $%.2f\nSaldo: $%.2f\n", ingresos, gastos, ingresos - gastos);
}

void generarReporte() {
	FILE *f = fopen(ARCHIVO_DATOS, "r");
	char linea[200];
	Movimiento m;
	
	if (!f) {
		printf("No hay movimientos.\n");
		return;
	}
	
	printf("\n--- Reporte ---\n");
	while (fgets(linea, sizeof(linea), f)) {
		sscanf(linea, "%10[^|]|%29[^|]|%99[^|]|%f|%d",
			   m.fecha, m.categoria, m.descripcion, &m.monto, (int *)&m.tipo);
		printf("%s | %s | %s | $%.2f | %s\n", m.fecha, m.categoria, m.descripcion,
			   m.monto, m.tipo == INGRESO ? "Ingreso" : "Gasto");
	}
	
	fclose(f);
}

void calcularImpuestos() {
	FILE *f = fopen(ARCHIVO_DATOS, "r");
	char linea[200];
	Movimiento m;
	float ingresos = 0;
	
	if (!f) {
		printf("No hay datos.\n");
		return;
	}
	
	while (fgets(linea, sizeof(linea), f)) {
		sscanf(linea, "%10[^|]|%29[^|]|%99[^|]|%f|%d",
			   m.fecha, m.categoria, m.descripcion, &m.monto, (int *)&m.tipo);
		if (m.tipo == INGRESO) ingresos += m.monto;
	}
	
	fclose(f);
	printf("\nTotal ingresos: $%.2f\nImpuesto estimado (16%%): $%.2f\n", ingresos, ingresos * 0.16f);
}

void exportarCSV() {
	FILE *f = fopen(ARCHIVO_DATOS, "r");
	FILE *csv = fopen("declaracion.csv", "w");
	char linea[200];
	Movimiento m;
	
	if (!f || !csv) {
		printf("Error al exportar.\n");
		if (f) fclose(f);
		if (csv) fclose(csv);
		return;
	}
	
	fprintf(csv, "Fecha,Categoria,Descripcion,Monto,Tipo\n");
	
	while (fgets(linea, sizeof(linea), f)) {
		sscanf(linea, "%10[^|]|%29[^|]|%99[^|]|%f|%d",
			   m.fecha, m.categoria, m.descripcion, &m.monto, (int *)&m.tipo);
		fprintf(csv, "%s,%s,%s,%.2f,%s\n", m.fecha, m.categoria, m.descripcion, m.monto,
				m.tipo == INGRESO ? "Ingreso" : "Gasto");
	}
	
	fclose(f);
	fclose(csv);
	printf("? Exportado como declaracion.csv\n");
}

void planesAhorro() {
	FILE *f = fopen(ARCHIVO_DATOS, "r");
	FILE *txt = fopen("plan_ahorro.txt", "w");
	char linea[200], meses[100][8];
	float ingresos = 0, saldos[100] = {0};
	Movimiento m;
	int plan, i, totalMeses = 0;
	
	if (!f || !txt) {
		printf("Error al procesar plan.\n");
		if (f) fclose(f);
		if (txt) fclose(txt);
		return;
	}
	
	printf("\n--- Planes de ahorro ---\n1. Básico (10%% ingresos)\n2. Meta ($1000 mensual)\nSeleccione: ");
	scanf("%d", &plan);
	getchar();
	
	if (plan == 1) {
		while (fgets(linea, sizeof(linea), f)) {
			sscanf(linea, "%10[^|]|%29[^|]|%99[^|]|%f|%d",
				   m.fecha, m.categoria, m.descripcion, &m.monto, (int *)&m.tipo);
			if (m.tipo == INGRESO) ingresos += m.monto;
		}
		fprintf(txt, "Plan Básico\nIngresos: $%.2f\nAhorro sugerido: $%.2f\n", ingresos, ingresos * 0.10f);
		printf("Ahorro sugerido: $%.2f\n", ingresos * 0.10f);
	} else if (plan == 2) {
		while (fgets(linea, sizeof(linea), f)) {
			sscanf(linea, "%10[^|]|%29[^|]|%99[^|]|%f|%d",
				   m.fecha, m.categoria, m.descripcion, &m.monto, (int *)&m.tipo);
			char mes[8];
			strncpy(mes, m.fecha + 3, 7);
			mes[7] = '\0';
			
			for (i = 0; i < totalMeses; i++) {
				if (strcmp(meses[i], mes) == 0) break;
			}
			
			if (i == totalMeses) {
				strcpy(meses[totalMeses], mes);
				totalMeses++;
			}
			
			if (m.tipo == INGRESO) saldos[i] += m.monto;
			else if (m.tipo == GASTO) saldos[i] -= m.monto;
		}
		
		for (i = 0; i < totalMeses; i++) {
			fprintf(txt, "%s - Saldo: $%.2f - %s\n", meses[i], saldos[i],
					saldos[i] >= 1000 ? "? Meta alcanzada" : "? Meta no alcanzada");
			printf("%s - Saldo: $%.2f - %s\n", meses[i], saldos[i],
				   saldos[i] >= 1000 ? "? Meta alcanzada" : "? Meta no alcanzada");
		}
	}
	
	fclose(f);
	fclose(txt);
	printf("? Reporte generado en plan_ahorro.txt\n");
}
